
AWSTemplateFormatVersion: 2010-09-09
Description: Security Vulnerability Scanning Module
Transform: 'AWS::Serverless-2016-10-31'

Resources:

  JobBucket:
      Type: 'AWS::S3::Bucket'

  OutputBucket:
    Type: 'AWS::S3::Bucket'

  JobRole:
      Type: 'AWS::IAM::Role'
      Properties:
        AssumeRolePolicyDocument:
          Version: 2012-10-17
          Statement:
            - Effect: Allow
              Principal:
                Service: glue.amazonaws.com
              Action: 'sts:AssumeRole'
        ManagedPolicyArns:
          - 'arn:aws:iam::aws:policy/CloudWatchFullAccess'
        Policies:
          - PolicyName: WritePolicy
            PolicyDocument:
              Version: 2012-10-17
              Statement:
                - Effect: Allow
                  Action:
                    - 'S3:PutObject'
                  Resource:
                    - !GetAtt 
                      - OutputBucket
                      - Arn
                    - !Join 
                      - /
                      - - !GetAtt 
                          - OutputBucket
                          - Arn
                        - '*'
          - PolicyName: PropertiesPolicy
            PolicyDocument:
              Version: 2012-10-17
              Statement:
                - Effect: Allow
                  Action:
                    - 'S3:GetObject'
                    - 'S3:PutObject'
                  Resource:
                    - !GetAtt 
                      - JobBucket
                      - Arn
                    - !Join 
                      - /
                      - - !GetAtt 
                          - JobBucket
                          - Arn
                        - '*'
          - PolicyName: InvokeModelPolicy
            PolicyDocument:
              Version: 2012-10-17
              Statement:
                - Effect: Allow
                  Action:
                    - "bedrock:InvokeModel" 
                  Resource:
                    - '*'
      
  ExtractionJob:
    Type: 'AWS::Glue::Job'
    Properties:
      Command:
        Name: pythonshell
        PythonVersion: '3.9'
        ScriptLocation: !Sub 's3://${JobBucket}/extraction.py'
      DefaultArguments:
        '--additional-python-modules': requests, boto3==1.28.57, pandas, awswrangler
        '--OUTPUT_BUCKET_NAME': !Ref OutputBucket
      Role: !Ref JobRole

  FunctionRole:
    Type: 'AWS::IAM::Role'
    Properties:
      AssumeRolePolicyDocument:
        Version: 2012-10-17
        Statement:
          - Effect: Allow
            Principal:
              Service: lambda.amazonaws.com
            Action: 'sts:AssumeRole'
      ManagedPolicyArns:
        - 'arn:aws:iam::aws:policy/CloudWatchFullAccess'
        - 'arn:aws:iam::aws:policy/AWSXrayFullAccess'
      Policies:
        - PolicyName: DeletePolicy
          PolicyDocument:
            Version: 2012-10-17
            Statement:
              - Effect: Allow
                Action:
                  - 'S3:ListBucket'
                  - 'S3:DeleteObject'
                Resource:
                  - !GetAtt 
                    - OutputBucket
                    - Arn
                  - !Join 
                    - /
                    - - !GetAtt 
                        - OutputBucket
                        - Arn
                      - '*'
                  - !GetAtt 
                    - JobBucket
                    - Arn
                  - !Join 
                    - /
                    - - !GetAtt 
                        - JobBucket
                        - Arn
                      - '*'
        - PolicyName: WritePolicy
          PolicyDocument:
            Version: 2012-10-17
            Statement:
              - Effect: Allow
                Action:
                  - 'S3:PutObject'
                Resource:
                  - !GetAtt 
                    - JobBucket
                    - Arn
                  - !Join 
                    - /
                    - - !GetAtt 
                        - JobBucket
                        - Arn
                      - '*'

  ProvisioningFunction:
    Type: 'AWS::Lambda::Function'
    Properties:
      Code:
        ZipFile: |
          import json
          import boto3
          import os
          import cfnresponse

          def handler(event, context):

            request = event["RequestType"]

            if request == "Create":
              
              print("Creating")

              code = \
          r"""
          import requests
          import json
          import boto3
          import re
          import pandas as pd
          import awswrangler as wr
          import os

          def extract(job):
              
              prompt = f"Return a JSON object with the following keys: 'job_title', 'company', and 'salary' from the following JSON:\n {job}"
              body = json.dumps({
                  "prompt": f"\n\nHuman: {prompt}\n\nAssistant:",
                  "max_tokens_to_sample": 100,
              })
              
              response = boto3.client('bedrock-runtime').invoke_model(body=body, modelId="anthropic.claude-v2")
              
              response_body = json.loads(response.get("body").read())
              response_completion = response_body.get("completion")
              # print(response_completion)
              
              response_json = {}
              matches = re.findall(r'\{.*?\}', response_completion, re.DOTALL)
              if matches:
                  response_json = json.loads(matches[0])
              # print(response_json)

              return response_json

          url = "https://boards-api.greenhouse.io/v1/boards/camundaservices/jobs?content=true"
          response = requests.get(url)
          content = json.loads(response.content.decode('utf-8'))
          jobs = content["jobs"]

          jsons = [extract(job) for job in jobs]
          # print(jsons)

          df = pd.DataFrame.from_dict(jsons)
          print(df)

          # wr.s3.to_parquet(
          #     dataframe=df,
          #     path=f"s3://{os.environ['OUTPUT_BUCKET_NAME']}/output.parquet"
          # )
          """

              boto3.resource("s3").Object(
                bucket_name=os.environ['JOB_BUCKET_NAME'], 
                key="extraction.py"
              ).put(Body=code)
            
            if request == "Delete":

              print("Deleting")

              s3 = boto3.resource("s3")

              bucket = s3.Bucket(os.environ['OUTPUT_BUCKET_NAME'])
              bucket.objects.delete()

              bucket = s3.Bucket(os.environ['JOB_BUCKET_NAME'])
              bucket.objects.delete()
            
            responseData = {}
            cfnresponse.send(event, context, cfnresponse.SUCCESS, responseData, "CustomResourcePhysicalID")
      Handler: index.handler
      MemorySize: 10240
      Timeout: 900
      Runtime: python3.11
      Environment:
        Variables:
          JOB_BUCKET_NAME: !Ref JobBucket
          OUTPUT_BUCKET_NAME: !Ref OutputBucket
      Role: !GetAtt 
        - FunctionRole
        - Arn

  ProvisioningCustomResource:
    Type: 'Custom::S3Create'
    Properties:
      ServiceToken: !GetAtt 
        - ProvisioningFunction
        - Arn

Outputs:

  Bucket:
    Value: !Ref OutputBucket

  Job: 
    Value: !Ref ExtractionJob
